/* Copyright (C) 2013-2014 Krzysztof Jakubowski <nadult@fastmail.fm>

   This file is part of FreeFT.
 */

#ifndef GFX_FONT_H
#define GFX_FONT_H

#include <baselib.h>
#include "gfx/device.h"

namespace gfx
{
	using namespace baselib;

	enum class HAlign {
		left,
		center,
		right,
	};

	enum class VAlign {
		top,
		center,
		bottom,
	};

	struct FontStyle {
		FontStyle(Color color, Color shadow_color, HAlign halign = HAlign::left, VAlign valign = VAlign::top);
		FontStyle(Color color, HAlign halign = HAlign::left, VAlign valign = VAlign::top);

		Color text_color;
		Color shadow_color;
		HAlign halign;
		VAlign valign;
	};

	//TODO: fonts base on freetype
	// Based on fonts generated by BMFont
	// Strings should be encoded in UTF-8
	class Font: public Resource
	{
	public:
		Font() { }

		void load(Stream&);
		void loadFromXML(const XMLDocument&);

		const IRect evalExtents(const char *str) const;
		const IRect evalExtents(const TextFormatter &fmt) const { return evalExtents(fmt.text()); }

		const FRect draw(const FRect &rect, const FontStyle &style, const char *text) const;
		const FRect draw(const FRect &rect, const FontStyle &style, const TextFormatter &fmt) const
			{ return draw(rect, style, fmt.text()); }
		const FRect draw(const FRect &rect, const FontStyle &style, const string &str) const
			{ return draw(rect, style, str.c_str()); }

		const FRect draw(const float2 &pos, const FontStyle &style, const char *text) const
			{ return draw(FRect(pos, pos), style, text); }
		const FRect draw(const float2 &pos, const FontStyle &style, const TextFormatter &fmt) const
			{ return draw(FRect(pos, pos), style, fmt.text()); }
		const FRect draw(const float2 &pos, const FontStyle &style, const string &str) const
			{ return draw(FRect(pos, pos), style, str.c_str()); }

		int lineHeight() const { return m_line_height; }
		int textBase() const { return m_text_base; }

		static ResourceMgr<Font> mgr;

	private:
		// Returns number of quads generated
		// For every quad it generates: 4 * 2 floats in each buffer
		// bufSize is number of float pairs that fits in the buffer
		int genQuads(const char *str, float2 *out_pos, float2 *out_uv, int buffer_size) const;

		void draw(const int2 &pos, Color col, const char *text) const;

		struct Character {
			int2 tex_pos;
			int2 size;
			int2 offset;
			int x_advance;
		};
		
		static ResourceMgr<DTexture> tex_mgr;

		//TODO: better representation? hash table maybe?
		std::map<int, Character> m_chars;
		std::map<pair<int, int>, int> m_kernings;
		PTexture m_texture;

		string m_face_name;
		int2 m_tex_size;
		int m_line_height;
		int m_text_base;
	};

	typedef Ptr<Font> PFont;

}

#endif
