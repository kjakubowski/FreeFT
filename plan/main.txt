DEADLINE: Pre-alpha release (31st January, 12 days (96h) from 10th):
ONLY MOST IMPORTANT FEATURES, REFRAIN FROM POLISHING, OPTIMIZING, OR STUFF YOURE UNSURE ARE NECESSARY
 - Pre-alpha release
   issues/13-pre_alpha_release.txt

 - Not planned stuff
   issues/0-not_planned.txt (10.25)

1. Edytor map
 - prosty edytor tile-ów:
   issues/1-tile_editor.txt DONE (27 / 18)

 - proste ui:
   issues/2-simple_ui.txt DONE	 (16 / 12)

 - rozstawianie encji i edycja ich parametrów
   issues/4-entity_editor.txt

 - ulepszenia w edytorze
   issues/8-improve_editor.txt DONE  (9.5 / 12)

 - ulepszony UI:
   issues/10-ui_improvements.txt DONE  (20 / 31)

2. Prosta gra:
 - poruszanie się postacią
   issues/3-simple_character_movement.txt DONE  (26 / 15)

 - encje, interakcja z otoczeniem
   issues/5-entities.txt  DONE (64 / 18.5)

 - strzelanie i niszczenie obiektów
   issues/6-basic_shooting.txt

 - poprawiona nawigacja
   issues/7-improve_navigation.txt DONE (13 / 15)

 - proste udźwiękowienie
   issues/9-simple_audio.txt

 - system skryptów
   - LUA; skrypty mają być małe, nie wymagające debugowania; każdy bardziej skomplikowany kawałek
     kodu przenieść do C++; nie robić AI na skryptach! tzn. co najwyżej umożliwić sterowanie, ale
     cały rdzeń jest w C++; domyślnie AI powinno działać wogóle bez użycia jakichkolwiek skryptów,
     jedynie bardziej zaawansowana interakcja z userem może wymagać skryptowania;
     Skrypty mają być prostymi funkcjami, nie należy używać zaawansowanych ficzerów z LUY, unikać
     słowników i innych rzeczy które mają niejasną charakterystykę wydajnościowo pamięciową

 - system dialogów
   - taki jak w 2drpg? ale w XML

 - prosty system walki i proste AI (dra crittersów)
   - reakcja na obrażenia
   - AI dla crittersów
   - HPki, proste skille

3. Różne rzeczy do zrobienia:
 - konsola do wygodnego wypisywania tekstu z wnętrza różnych modułów
   issues/11-console.txt
 
 - dokończenie refactoringu nazewnictwa
   issues/12-code_cleanup.txt DONE (3 / 7)

 - ulepszanie wydajności tylko w razie potrzeby

 - UI jest opóźniony o klatkę w stosunku do ruchu myszy
 - pozmieniać konstruktory IRect i IBox, tak żeby jako drugi argument dawało się wielkość a nie koniec obiektu
 - dodać powtarzalnie emitowane eventy keypressed jeśli przytrzyma się dany klawisz
 - obsluga ESC podczas draggingu we wszystkich kontrolkach
 - uproszczenie przeplywu w ui::Window: rozbicie process() na kilka funkcji, np. updateFocus(), preProcess(), etc.
 - nie dodawac nowych ficzerów do ui::Window bez porządnego refaktoringu 
 - uprościć wyszukiwanie ścieżek (NavigationMap::findPath) i przy okazji jeśli się da, przyspieszyć
 - mapy nawigacyjne dla postaci o różnych wielkościach
 - jakiś bug na mapie nawigacyjnej dla testowej mapki (prawy dolny róg górnego budynku, przy rogu stosu desek
   jest mały kwadracik którego chyba nie powinno tam być)
 - w edytorze zaznaczanie na szaro obiektów które się przecinają z kursorem
 - zrobic porządek z ładowaniem tile-i i spritów do tekstur na GPU
 - zastanowić się jak można najlepiej skompresować teksturki i je później zdekompresować tak żeby
   było 60 FPS na netbooku
 - focus na itemie w ListBoxie zostaje jak mysz wyjedzie poza listę
 - button daje się wcisnąć jak przycisk myszy jest puszczony poza buttonem
 - dodać licencję
 - zaplanować kolejny refactoring, pozbierać wszystkie rzeczy do zrobienia (np. zajęcie się TODOsami)
 - dodać dokument z opisem nazewnictwa
 - zastanowić się czy może sensownie byłoby pozwolić na przechodzenie skosem przez rogi obiektów; uprościłoby
   to wyszukiwanie ścieżek, a problem z kolejnością rysowania powinno się dać załatwić przez delikatne zmniejszenie
   bboxów
 - pomysł na poprawienie renderingu overlapujących się obiektów: od bboxów odjąć część wspólną i dopiero
  wtedy je porównać
 - zrobić porządek ze Screen-rectami które są na intach choć wyliczane są z bbox-ów opartych o float-y


4. Bajery
 - możliwość rozmawiania z wrogo nastawionymi NPC-ami (podczas walki) np. możliwość poddania się lub
   zmuszenia przeciwnika do poddania
 - otwieranie drzwi z kopa i przywalenie komuś drzwiami jeśli blisko stoi (tak
   żeby fajnie odleciał)
 - rakiety naprowadzane laserowo
 - edytor sprite-ów
 - rozbić animację strzału na: rozpoczęcie celowania, celowanie, strzał / ogień ciągły, koniec celowania
 - binarny diff do sprite-ów i tile-i; patch based filesystem przyda się przy modyfikacji zasobów z tacticsa:
   najpierw konwertujemy je do własnego formatu, następnie aplikujemy patch-e i ew. kompresujemy lz4 w celu
   zmniejszenia czasu ładowania
